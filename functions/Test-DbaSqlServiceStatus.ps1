https://github.com/sqlcollaborative/dbatools/issues/544



function Test-DbaSqlServiceState {
    <#
        .SYNOPSIS
            Displays information relating to SQL Server Optimize for AdHoc Workloads setting.  Works on SQL Server 2008-2016.

        .DESCRIPTION
            When this option is set, plan cache size is further reduced for single-use ad hoc OLTP workload.

            More info: https://msdn.microsoft.com/en-us/library/cc645587.aspx
            http://www.sqlservercentral.com/blogs/glennberry/2011/02/25/some-suggested-sql-server-2008-r2-instance-configuration-settings/

            These are just general recommendations for SQL Server and are a good starting point for setting the "optimize for adhoc workloads" option.

        .PARAMETER SqlInstance
            A collection of one or more SQL Server instance names to query.

        .PARAMETER FromFile
            File name of service status information for bulk testing. This can be generated by calling

            Get-DbaSqlService -SqlInstance sql2008 | Export-Csv -Path "C:\Example\ServiceStatus.csv" -NoTypeInformation

        .PARAMETER FileType
            Type of the file being passed in for bulk testing (CSV, JSON, XML are supported).

        .PARAMETER EnableException
            By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message. This avoids overwhelming you with "sea of red" exceptions, but is inconvenient because it basically disables advanced scripting. Using this switch turns this "nice by default" feature off and enables you to catch exceptions with your own try/catch.

        .NOTES
            Tags: Configure, SPConfigure
            Author: Andrew Wickham, awickham.com

            Website: https://dbatools.io
            Copyright: (C) Chrissy LeMaire, clemaire@gmail.com
            License: GNU GPL v3 https://opensource.org/licenses/GPL-3.0

        .LINK
            https://dbatools.io/Test-DbaSqlServiceStatus

        .EXAMPLE
            Test-DbaSqlServiceStatus -SqlInstance sql2008

            Validates whether automatic services are running on sql2008.

        .EXAMPLE
            Get-DbaSqlService -SqlInstance sql2008 | Export-Csv -Path "C:\Example\ServiceStatus.csv" -NoTypeInformation

            Test-DbaSqlServiceStatus -SqlInstance sql2008 -FromFile "C:\Example\ServiceStatus.csv" -FileType "CSV"

            Generates a bulk service status file and tests against it.
    #>
    [CmdletBinding()]
    param (
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $True)]
        [Alias("ServerInstance", "SqlServer", "SqlServers")]
        [DbaInstance[]]$SqlInstance,
        [string]$FromFile,
        [ValidateSet('CSV','JSON','XML')]
        [string]$FileType = 'CSV',
        [switch][Alias('Silent')]$EnableException
    )

    begin {
        $states = @()

        if (Test-Bound FromFile) {
            $previousStatus = switch ($FileType) {
                'CSV' {
                    Import-Csv -Path $FromFile
                }
                'JSON' {
                    $content = Get-Content -Path $FromFile -Raw
                    ConvertFrom-Json -InputObject $content
                }
                'XML'{
                    $content = Get-Content -Path $FromFile -Raw
                    [xml]$content
                }
            }
        }
    }

    process {
        foreach ($instance in $SqlInstance) {
            $services = Get-DbaSqlService -ComputerName $instance

            if (-not (Test-Bound FromFile)) {
                $services = $services | Where-Object {
                    $_.StartMode -eq 'Automatic' -and $_.State -ne 'Running'
                }
            }

            foreach ($service in $services) {
                $stateHash = @{
                    ComputerName     = $service.ComputerName
                    InstanceName     = $service.InstanceName
                    SqlInstance      = $instance.FullName
                    CurrentState     = $service.State
                }

                $previousServiceStatus = $previousStatus | Where-Object {
                    $_.ComputerName -eq $service.ComputerName
                    -and $_.ServiceName -eq $service.ServiceName
                }

                if ($previousServiceStatus) {
                    $stateHash['RecommendedState'] = $previousServiceStatus.State
                }
                else {
                    $stateHash['RecommendedState'] = 'Running'
                }

                $states += [pscustomobject]$stateHash
            }
        }
    }

    end {
        $states
    }
}